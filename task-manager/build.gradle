plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'com.krglow'
version = '1.0.0'
sourceCompatibility = '17'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

sourceSets {
    generated {
        java {
            srcDirs = ['.apt_generated']
        }
    }
}

tasks.named('compileJava') {
    options.annotationProcessorGeneratedSourcesDirectory = file('.apt_generated')
}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.named('jacocoTestReport')
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
    }
}

eclipse {
    classpath {
        downloadSources = true
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Task Manager App"
        property "sonar.projectKey", "krglow"
        property "sonar.host.url", "http://localhost:9000"
    }
}
